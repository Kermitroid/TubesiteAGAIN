import { PlayerSdk } from '@api.video/player-sdk';
import * as React from 'react';
import { forwardRef, useState, useRef, useEffect, useImperativeHandle } from 'react';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var ApiVideoPlayer = forwardRef(function (props, ref) {
    var _a = useState(null), playerSdk = _a[0], setPlayerSdk = _a[1];
    var iframeRef = useRef(null);
    var _b = useState(null), ratio = _b[0], setRatio = _b[1];
    var _c = useState([]), controls = _c[0], setControls = _c[1];
    var _d = useState(null), theme = _d[0], setTheme = _d[1];
    useEffect(function () {
        if (!iframeRef.current || !!playerSdk)
            return;
        var sdk = new PlayerSdk(iframeRef.current, __assign(__assign({}, props), props.video));
        sdk.addEventListener("play", function () { var _a; return (_a = props === null || props === void 0 ? void 0 : props.onPlay) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("pause", function () { var _a; return (_a = props.onPause) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("controlsdisabled", function () { var _a; return (_a = props.onControlsDisabled) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("controlsenabled", function () { var _a; return (_a = props.onControlsEnabled) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("ended", function () { var _a; return (_a = props.onEnded) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("error", function () { var _a; return (_a = props.onError) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("firstplay", function () { var _a; return (_a = props.onFirstPlay) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("fullscreenchange", function () { var _a; return (_a = props.onFullscreenChange) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("mouseenter", function () { var _a; return (_a = props.onMouseEnter) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("mouseleave", function () { var _a; return (_a = props.onMouseLeave) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("playerresize", function () { var _a; return (_a = props.onPlayerResize) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("qualitychange", function (v) { var _a; return (_a = props.onQualityChange) === null || _a === void 0 ? void 0 : _a.call(props, v.resolution); });
        sdk.addEventListener("ratechange", function () { var _a; return (_a = props.onRateChange) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("ready", function () { var _a; return (_a = props.onReady) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("resize", function () { var _a; return (_a = props.onResize) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("seeking", function () { var _a; return (_a = props.onSeeking) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("timeupdate", function (v) { var _a; return (_a = props.onTimeUpdate) === null || _a === void 0 ? void 0 : _a.call(props, v.currentTime); });
        sdk.addEventListener("useractive", function () { var _a; return (_a = props.onUserActive) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("userinactive", function () { var _a; return (_a = props.onUserInactive) === null || _a === void 0 ? void 0 : _a.call(props); });
        sdk.addEventListener("volumechange", function (v) { var _a; return (_a = props.onVolumeChange) === null || _a === void 0 ? void 0 : _a.call(props, v.volume); });
        if (props.controls) {
            sdk.hideControls();
            sdk.showControls(props.controls);
        }
        if (props.videoStyleObjectFit) {
            sdk.setVideoStyleObjectFit(props.videoStyleObjectFit);
        }
        if (props.videoStyleTransform) {
            sdk.setVideoStyleTransform(props.videoStyleTransform);
        }
        if (props.theme) {
            sdk.setTheme(props.theme);
        }
        sdk.addEventListener("ready", function () {
            sdk
                .getVolume()
                .then(function (d) { return props.onVolumeChange && props.onVolumeChange(d); });
            sdk
                .getDuration()
                .then(function (d) { return props.onDurationChange && props.onDurationChange(d); });
            sdk.getVideoSize().then(function (size) {
                var videoSizeRatio = size.height / size.width;
                if (props.onVideoSizeRatioChange) {
                    props.onVideoSizeRatioChange(videoSizeRatio);
                }
                setRatio(videoSizeRatio);
            });
        });
        setPlayerSdk(sdk);
    }, [iframeRef]);
    useImperativeHandle(ref, function () { return ({
        play: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.play(); },
        pause: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.pause(); },
        requestFullscreen: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.requestFullscreen(); },
        exitFullscreen: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.exitFullscreen(); },
        mute: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.mute(); },
        unmute: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.unmute(); },
        hideTitle: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.hideTitle(); },
        showTitle: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.showTitle(); },
        hideControls: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.hideControls(); },
        showControls: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.showControls(); },
        seek: function (time) {
            if (isNaN(time))
                throw new Error("Invalid time");
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.seek(time);
        },
        setCurrentTime: function (time) {
            if (isNaN(time))
                throw new Error("Invalid time");
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setCurrentTime(time);
        },
        setLoop: function (loop) { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setLoop(loop); },
        setPlaybackRate: function (rate) {
            if (isNaN(rate))
                throw new Error("Invalid rate");
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setPlaybackRate(rate);
        },
        setVolume: function (volume) {
            if (isNaN(volume))
                throw new Error("Invalid volume");
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setVolume(volume);
        },
        requestPictureInPicture: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.requestPictureInPicture(); },
        exitPictureInPicture: function () { return playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.exitPictureInPicture(); },
    }); });
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.loadConfig(__assign(__assign({}, props), props.video));
    }, [
        props.video.id,
        props.video.token,
        props.video.privateSession,
        props.video.live,
    ]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setChromeless(props.chromeless || false);
    }, [props.chromeless]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setLoop(props.loop || false);
    }, [props.loop]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setAutoplay(props.autoplay || false);
    }, [props.autoplay]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setMinimalQuality(props.minimalQuality || 0);
    }, [props.minimalQuality]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setMaximalQuality(props.maximalQuality || 0);
    }, [props.maximalQuality]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setVideoStyleTransform(props.videoStyleTransform || "");
    }, [props.videoStyleTransform]);
    useEffect(function () {
        playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setVideoStyleObjectFit(props.videoStyleObjectFit || "none");
    }, [props.videoStyleObjectFit]);
    useEffect(function () {
        if (props.muted !== undefined) {
            props.muted ? playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.mute() : playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.unmute();
        }
    }, [props.muted]);
    useEffect(function () {
        if (props.volume !== undefined) {
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setVolume(props.volume);
        }
    }, [props.volume]);
    useEffect(function () {
        if (props.hideTitle !== undefined) {
            props.hideTitle ? playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.hideTitle() : playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.showTitle();
        }
    }, [props.hideTitle]);
    useEffect(function () {
        if (props.hidePoster !== undefined) {
            props.hidePoster ? playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.hidePoster() : playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.showPoster();
        }
    }, [props.hidePoster]);
    useEffect(function () {
        if (props.showSubtitles !== undefined) {
            props.showSubtitles
                ? playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.showSubtitles()
                : playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.hideSubtitles();
        }
    }, [props.showSubtitles]);
    useEffect(function () {
        if (props.playbackRate !== undefined) {
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setPlaybackRate(props.playbackRate);
        }
    }, [props.playbackRate]);
    useEffect(function () {
        var allControls = [
            "play",
            "seekBackward",
            "seekForward",
            "playbackRate",
            "volume",
            "fullscreen",
            "subtitles",
            "chapters",
            "pictureInPicture",
            "progressBar",
            "chromecast",
            "download",
            "more",
        ];
        var oldControls = controls.length > 0 ? controls : allControls;
        var nextControls = props.controls != undefined ? props.controls : allControls;
        var added = nextControls.filter(function (c) { return oldControls.indexOf(c) === -1; });
        var removed = oldControls.filter(function (c) { return nextControls.indexOf(c) === -1; });
        if (added.length > 0)
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.showControls(added);
        if (removed.length > 0)
            playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.hideControls(removed);
        setControls(nextControls);
    }, [props.controls]);
    useEffect(function () {
        if (props.theme) {
            var themeHasChanged = function (oldTheme, newTheme) {
                return (Object.keys(oldTheme).length !== Object.keys(newTheme).length ||
                    Object.keys(oldTheme).filter(function (k) {
                        return oldTheme[k] !==
                            newTheme[k];
                    }).length > 0);
            };
            if (theme === null || themeHasChanged(theme, props.theme)) {
                playerSdk === null || playerSdk === void 0 ? void 0 : playerSdk.setTheme(props.theme);
                setTheme(props.theme);
            }
        }
    }, [props.theme]);
    var responsiveStyle = {};
    if (props.responsive) {
        if (ratio) {
            responsiveStyle.paddingTop = "".concat(ratio * 100, "%");
        }
        else {
            responsiveStyle.height = 0;
        }
        responsiveStyle.width = "100%";
    }
    return (React.createElement("div", { style: __assign(__assign(__assign({}, (props.style || {})), { position: "relative" }), responsiveStyle) },
        React.createElement("iframe", { allowFullScreen: true, allow: "autoplay; picture-in-picture", style: {
                width: "100%",
                height: "100%",
                border: "none",
                position: "absolute",
                top: 0,
                left: 0,
            }, ref: iframeRef }),
        props.children && (React.createElement("div", { style: {
                width: "100%",
                height: "100%",
                position: "absolute",
                top: 0,
            } }, props.children))));
});

export { ApiVideoPlayer as default };
//# sourceMappingURL=index.es.js.map
