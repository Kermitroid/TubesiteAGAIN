import * as React from "react";
export type PlayerTheme = {
    text?: string;
    link?: string;
    linkHover?: string;
    trackPlayed?: string;
    trackUnplayed?: string;
    trackBackground?: string;
    backgroundTop?: string;
    backgroundBottom?: string;
    backgroundText?: string;
    linkActive?: string;
};
export type ControlName = "play" | "seekBackward" | "seekForward" | "playbackRate" | "volume" | "fullscreen" | "subtitles" | "chapters" | "pictureInPicture" | "progressBar" | "chromecast" | "download" | "more";
export interface ApiVideoPlayerVideo {
    id: string;
    live?: boolean;
    token?: string;
    privateSession?: string;
}
export interface ApiVideoPlayerProps {
    style?: React.CSSProperties;
    autoplay?: boolean;
    muted?: boolean;
    metadata?: {
        [key: string]: string;
    };
    ads?: {
        adTagUrl: string;
    };
    hideControls?: boolean;
    hidePoster?: boolean;
    chromeless?: boolean;
    loop?: boolean;
    hideTitle?: boolean;
    iframeUrl?: string;
    playbackRate?: number;
    showSubtitles?: boolean;
    video: ApiVideoPlayerVideo;
    volume?: number;
    controls?: ControlName[];
    theme?: PlayerTheme;
    videoStyleObjectFit?: "contain" | "cover" | "fill" | "none" | "scale-down";
    videoStyleTransform?: string;
    customDomain?: string;
    hotKeys?: boolean;
    minimalQuality?: number;
    maximalQuality?: number;
    responsive?: boolean;
    onPlay?: () => void;
    onPause?: () => void;
    onControlsDisabled?: () => void;
    onControlsEnabled?: () => void;
    onEnded?: () => void;
    onError?: () => void;
    onFirstPlay?: () => void;
    onFullscreenChange?: () => void;
    onMouseEnter?: () => void;
    onMouseLeave?: () => void;
    onPlayerResize?: () => void;
    onQualityChange?: (resolution: {
        height: number;
        width: number;
    }) => void;
    onVideoSizeRatioChange?: (ratio: number) => void;
    onRateChange?: () => void;
    onReady?: () => void;
    onResize?: () => void;
    onSeeking?: () => void;
    onTimeUpdate?: (currentTime: number) => void;
    onUserActive?: () => void;
    onUserInactive?: () => void;
    onVolumeChange?: (volume: number) => void;
    onDurationChange?: (duration: number) => void;
    children?: JSX.Element | JSX.Element[];
}
export interface ApiVideoPlayerRef {
    play: () => void;
    pause: () => void;
    requestFullscreen: () => void;
    exitFullscreen: () => void;
    mute: () => void;
    unmute: () => void;
    hideTitle: () => void;
    showTitle: () => void;
    hideControls: () => void;
    showControls: () => void;
    seek: (time: number) => void;
    setCurrentTime: (time: number) => void;
    setLoop: (loop: boolean) => void;
    setPlaybackRate: (rate: number) => void;
    setVolume: (volume: number) => void;
    requestPictureInPicture: () => void;
    exitPictureInPicture: () => void;
}
declare const ApiVideoPlayer: React.ForwardRefExoticComponent<ApiVideoPlayerProps & React.RefAttributes<ApiVideoPlayerRef>>;
export default ApiVideoPlayer;
