/**
 * @api.video/nodejs-client
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated.
 * Do not edit the class manually.
 */
import HttpClient, { ApiResponseHeaders } from '../HttpClient';
import ProgressiveSession from '../model/ProgressiveSession';
import DiscardedVideoUpdatePayload from '../model/DiscardedVideoUpdatePayload';
import Video from '../model/Video';
import VideoCreationPayload from '../model/VideoCreationPayload';
import VideoStatus from '../model/VideoStatus';
import VideoThumbnailPickPayload from '../model/VideoThumbnailPickPayload';
import VideoUpdatePayload from '../model/VideoUpdatePayload';
import VideosListResponse from '../model/VideosListResponse';
import UploadProgressEvent from '../model/UploadProgressEvent';
import { Readable } from 'stream';
/**
 * no description
 */
export default class VideosApi {
    private httpClient;
    constructor(httpClient: HttpClient);
    /**
     * Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos).
     * Create a video object
     * @param videoCreationPayload video to create
     */
    create(videoCreationPayload: VideoCreationPayload): Promise<Video>;
    /**
     * Creates a video object. More information on video objects can be found [here](https://docs.api.video/reference/api/Videos).
     * Create a video object
     * @param videoCreationPayload video to create
     */
    createWithResponseHeaders(videoCreationPayload: VideoCreationPayload): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * Upload a video
     * This will create a progressive upload session.
     * @param videoId Enter the videoId you want to use to upload your video.
     */
    createUploadProgressiveSession(videoId: string): ProgressiveSession<Video>;
    /**
     * To upload a video to the videoId you created. You can only upload your video to the videoId once.
  
  
  
  We offer 2 types of upload:
  
  * Regular upload
  
  * Progressive upload
  
  The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to
  
    * allow the upload of video sources > 200 MiB (200 MiB = the max. allowed file size for regular upload)
  
    * allow to send a video source "progressively", i.e., before before knowing the total size of the video.
  
    Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as "completely sent" when the "last" chunk is sent (i.e., the chunk that "completes" the upload).
  
  
     * Upload a video
     * @param videoId Enter the videoId you want to use to upload your video.
     * @param file The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.
     */
    upload(videoId: string, file: string, progressListener?: (event: UploadProgressEvent) => void): Promise<Video>;
    /**
     * To upload a video to the videoId you created. You can only upload your video to the videoId once.
  
  
  
  We offer 2 types of upload:
  
  * Regular upload
  
  * Progressive upload
  
  The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to
  
    * allow the upload of video sources > 200 MiB (200 MiB = the max. allowed file size for regular upload)
  
    * allow to send a video source "progressively", i.e., before before knowing the total size of the video.
  
    Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as "completely sent" when the "last" chunk is sent (i.e., the chunk that "completes" the upload).
  
  
     * Upload a video
     * @param videoId Enter the videoId you want to use to upload your video.
     * @param file The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.
     */
    uploadWithResponseHeaders(videoId: string, file: string, progressListener?: (event: UploadProgressEvent) => void): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * Upload with an delegated upload token
     * This will create a progressive upload session.
     * @param token The unique identifier for the token you want to use to upload a video.
     */
    createUploadWithUploadTokenProgressiveSession(token: string): ProgressiveSession<Video>;
    /**
     * This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you'd better use the [standard upload method](#upload).
     * Upload with an delegated upload token
     * @param token The unique identifier for the token you want to use to upload a video.
     * @param file The path to the video you want to upload.
     */
    uploadWithUploadToken(token: string, file: string, progressListener?: (event: UploadProgressEvent) => void): Promise<Video>;
    /**
     * This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you'd better use the [standard upload method](#upload).
     * Upload with an delegated upload token
     * @param token The unique identifier for the token you want to use to upload a video.
     * @param file The path to the video you want to upload.
     */
    uploadWithUploadTokenWithResponseHeaders(token: string, file: string, progressListener?: (event: UploadProgressEvent) => void): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
     * Retrieve a video object
     * @param videoId The unique identifier for the video you want details about.
     */
    get(videoId: string): Promise<Video>;
    /**
     * This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
     * Retrieve a video object
     * @param videoId The unique identifier for the video you want details about.
     */
    getWithResponseHeaders(videoId: string): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * Updates the parameters associated with a video ID. The video object you are updating is determined by the video ID you provide.
  
  
  
  NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
  
  
     * Update a video object
     * @param videoId The video ID for the video you want to update.
     * @param videoUpdatePayload
     */
    update(videoId: string, videoUpdatePayload?: VideoUpdatePayload): Promise<Video>;
    /**
     * Updates the parameters associated with a video ID. The video object you are updating is determined by the video ID you provide.
  
  
  
  NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it.
  
  
     * Update a video object
     * @param videoId The video ID for the video you want to update.
     * @param videoUpdatePayload
     */
    updateWithResponseHeaders(videoId: string, videoUpdatePayload?: VideoUpdatePayload): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. By default, deleted videos cannot be recovered. If you have the Video Restore feature enabled, this operation will discard the video instead of permanently deleting it. Make sure you subscribe to the Video Restore feature if you want to be able to restore deleted videos! The Video Restore feature retains videos for 90 days, after which the videos are permanently deleted
     * Delete a video object
     * @param videoId The video ID for the video you want to delete.
     */
    delete(videoId: string): Promise<void>;
    /**
     * If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. By default, deleted videos cannot be recovered. If you have the Video Restore feature enabled, this operation will discard the video instead of permanently deleting it. Make sure you subscribe to the Video Restore feature if you want to be able to restore deleted videos! The Video Restore feature retains videos for 90 days, after which the videos are permanently deleted
     * Delete a video object
     * @param videoId The video ID for the video you want to delete.
     */
    deleteWithResponseHeaders(videoId: string): Promise<{
        headers: ApiResponseHeaders;
        body: void;
    }>;
    /**
     * This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
     * List all video objects
     * @param {Object} searchParams
     * @param { string } searchParams.title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
     * @param { Array&lt;string&gt; } searchParams.tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
     * @param { { [key: string]: string; } } searchParams.metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter.
     * @param { string } searchParams.description Retrieve video objects by &#x60;description&#x60;.
     * @param { string } searchParams.liveStreamId Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;.
     * @param { &#39;title&#39; | &#39;createdAt&#39; | &#39;publishedAt&#39; | &#39;updatedAt&#39; } searchParams.sortBy Use this parameter to sort videos by the their created time, published time, updated time, or by title.
     * @param { &#39;asc&#39; | &#39;desc&#39; } searchParams.sortOrder Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A.
     * @param { number } searchParams.currentPage Choose the number of search results to return per page. Minimum value: 1
     * @param { number } searchParams.pageSize Results per page. Allowed values 1-100, default is 25.
     */
    list(args?: {
        title?: string;
        tags?: Array<string>;
        metadata?: {
            [key: string]: string;
        };
        description?: string;
        liveStreamId?: string;
        sortBy?: 'title' | 'createdAt' | 'publishedAt' | 'updatedAt';
        sortOrder?: 'asc' | 'desc';
        currentPage?: number;
        pageSize?: number;
    }): Promise<VideosListResponse>;
    /**
     * This method returns a list of your videos (with all their details). With no parameters added, the API returns the first page of all videos. You can filter videos using the parameters described below.
     * List all video objects
     * @param {Object} searchParams
     * @param { string } searchParams.title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
     * @param { Array&lt;string&gt; } searchParams.tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
     * @param { { [key: string]: string; } } searchParams.metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter.
     * @param { string } searchParams.description Retrieve video objects by &#x60;description&#x60;.
     * @param { string } searchParams.liveStreamId Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;.
     * @param { &#39;title&#39; | &#39;createdAt&#39; | &#39;publishedAt&#39; | &#39;updatedAt&#39; } searchParams.sortBy Use this parameter to sort videos by the their created time, published time, updated time, or by title.
     * @param { &#39;asc&#39; | &#39;desc&#39; } searchParams.sortOrder Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A.
     * @param { number } searchParams.currentPage Choose the number of search results to return per page. Minimum value: 1
     * @param { number } searchParams.pageSize Results per page. Allowed values 1-100, default is 25.
     */
    listWithResponseHeaders({ title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, }?: {
        title?: string;
        tags?: Array<string>;
        metadata?: {
            [key: string]: string;
        };
        description?: string;
        liveStreamId?: string;
        sortBy?: 'title' | 'createdAt' | 'publishedAt' | 'updatedAt';
        sortOrder?: 'asc' | 'desc';
        currentPage?: number;
        pageSize?: number;
    }): Promise<{
        headers: ApiResponseHeaders;
        body: VideosListResponse;
    }>;
    /**
     * The thumbnail is the poster that appears in the player window before video playback begins.
  
  
  
  This endpoint allows you to upload an image for the thumbnail.
  
  
  
  To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.
  
  
  
  Note: There may be a short delay before the new thumbnail is delivered to our CDN.
     * Upload a thumbnail
     * @param videoId Unique identifier of the chosen video
     * @param file The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
     */
    uploadThumbnail(videoId: string, file: string | Readable | Buffer): Promise<Video>;
    /**
     * The thumbnail is the poster that appears in the player window before video playback begins.
  
  
  
  This endpoint allows you to upload an image for the thumbnail.
  
  
  
  To select a still frame from the video using a time stamp, use the [dedicated method](#pickThumbnail) to pick a time in the video.
  
  
  
  Note: There may be a short delay before the new thumbnail is delivered to our CDN.
     * Upload a thumbnail
     * @param videoId Unique identifier of the chosen video
     * @param file The image to be added as a thumbnail. The mime type should be image/jpeg, image/png or image/webp. The max allowed size is 8 MiB.
     */
    uploadThumbnailWithResponseHeaders(videoId: string, file: string | Readable | Buffer): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * Pick a thumbnail from the given time code.
  
  
  
  If you'd like to upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail).
  
  
  
  There may be a short delay for the thumbnail to update.
  
  
     * Set a thumbnail
     * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
     * @param videoThumbnailPickPayload
     */
    pickThumbnail(videoId: string, videoThumbnailPickPayload: VideoThumbnailPickPayload): Promise<Video>;
    /**
     * Pick a thumbnail from the given time code.
  
  
  
  If you'd like to upload an image for your thumbnail, use the dedicated [method](#uploadThumbnail).
  
  
  
  There may be a short delay for the thumbnail to update.
  
  
     * Set a thumbnail
     * @param videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
     * @param videoThumbnailPickPayload
     */
    pickThumbnailWithResponseHeaders(videoId: string, videoThumbnailPickPayload: VideoThumbnailPickPayload): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
     * Retrieve a discarded video object
     * @param videoId The unique identifier for the video you want details about.
     */
    getDiscarded(videoId: string): Promise<Video>;
    /**
     * This call provides the same information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL.
     * Retrieve a discarded video object
     * @param videoId The unique identifier for the video you want details about.
     */
    getDiscardedWithResponseHeaders(videoId: string): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
    /**
     * This method provides upload status & encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
     * Retrieve video status and details
     * @param videoId The unique identifier for the video you want the status for.
     */
    getStatus(videoId: string): Promise<VideoStatus>;
    /**
     * This method provides upload status & encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities.
     * Retrieve video status and details
     * @param videoId The unique identifier for the video you want the status for.
     */
    getStatusWithResponseHeaders(videoId: string): Promise<{
        headers: ApiResponseHeaders;
        body: VideoStatus;
    }>;
    /**
     * This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
     * List all discarded video objects
     * @param {Object} searchParams
     * @param { string } searchParams.title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
     * @param { Array&lt;string&gt; } searchParams.tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
     * @param { { [key: string]: string; } } searchParams.metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter.
     * @param { string } searchParams.description Retrieve video objects by &#x60;description&#x60;.
     * @param { string } searchParams.liveStreamId Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;.
     * @param { &#39;title&#39; | &#39;createdAt&#39; | &#39;publishedAt&#39; | &#39;updatedAt&#39; } searchParams.sortBy Use this parameter to sort videos by the their created time, published time, updated time, or by title.
     * @param { &#39;asc&#39; | &#39;desc&#39; } searchParams.sortOrder Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A.
     * @param { number } searchParams.currentPage Choose the number of search results to return per page. Minimum value: 1
     * @param { number } searchParams.pageSize Results per page. Allowed values 1-100, default is 25.
     */
    listDiscarded(args?: {
        title?: string;
        tags?: Array<string>;
        metadata?: {
            [key: string]: string;
        };
        description?: string;
        liveStreamId?: string;
        sortBy?: 'title' | 'createdAt' | 'publishedAt' | 'updatedAt';
        sortOrder?: 'asc' | 'desc';
        currentPage?: number;
        pageSize?: number;
    }): Promise<VideosListResponse>;
    /**
     * This method returns a list of your discarded videos (with all their details). With no parameters added, the API returns the first page of all discarded videos. You can filter discarded videos using the parameters described below.
     * List all discarded video objects
     * @param {Object} searchParams
     * @param { string } searchParams.title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
     * @param { Array&lt;string&gt; } searchParams.tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
     * @param { { [key: string]: string; } } searchParams.metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter.
     * @param { string } searchParams.description Retrieve video objects by &#x60;description&#x60;.
     * @param { string } searchParams.liveStreamId Retrieve video objects that were recorded from a live stream by &#x60;liveStreamId&#x60;.
     * @param { &#39;title&#39; | &#39;createdAt&#39; | &#39;publishedAt&#39; | &#39;updatedAt&#39; } searchParams.sortBy Use this parameter to sort videos by the their created time, published time, updated time, or by title.
     * @param { &#39;asc&#39; | &#39;desc&#39; } searchParams.sortOrder Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A.
     * @param { number } searchParams.currentPage Choose the number of search results to return per page. Minimum value: 1
     * @param { number } searchParams.pageSize Results per page. Allowed values 1-100, default is 25.
     */
    listDiscardedWithResponseHeaders({ title, tags, metadata, description, liveStreamId, sortBy, sortOrder, currentPage, pageSize, }?: {
        title?: string;
        tags?: Array<string>;
        metadata?: {
            [key: string]: string;
        };
        description?: string;
        liveStreamId?: string;
        sortBy?: 'title' | 'createdAt' | 'publishedAt' | 'updatedAt';
        sortOrder?: 'asc' | 'desc';
        currentPage?: number;
        pageSize?: number;
    }): Promise<{
        headers: ApiResponseHeaders;
        body: VideosListResponse;
    }>;
    /**
     * Use this endpoint to restore a discarded video when you have the Video Restore feature enabled.
  
  
     * Update a discarded video object
     * @param videoId The video ID for the video you want to restore.
     * @param discardedVideoUpdatePayload
     */
    updateDiscarded(videoId: string, discardedVideoUpdatePayload?: DiscardedVideoUpdatePayload): Promise<Video>;
    /**
     * Use this endpoint to restore a discarded video when you have the Video Restore feature enabled.
  
  
     * Update a discarded video object
     * @param videoId The video ID for the video you want to restore.
     * @param discardedVideoUpdatePayload
     */
    updateDiscardedWithResponseHeaders(videoId: string, discardedVideoUpdatePayload?: DiscardedVideoUpdatePayload): Promise<{
        headers: ApiResponseHeaders;
        body: Video;
    }>;
}
