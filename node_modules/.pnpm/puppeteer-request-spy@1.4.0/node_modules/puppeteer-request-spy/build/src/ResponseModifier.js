"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseModifier = void 0;
const HttpRequestFactory_1 = require("./common/HttpRequestFactory");
const resolveOptionalPromise_1 = require("./common/resolveOptionalPromise");
const UrlAccessorResolver_1 = require("./common/urlAccessor/UrlAccessorResolver");
class ResponseModifier {
    constructor(patterns, responseModifierCallBack, httpRequestFactory = (new HttpRequestFactory_1.HttpRequestFactory())) {
        if (typeof patterns !== 'string' && patterns.constructor !== Array) {
            throw new Error('invalid pattern, pattern must be of type string or string[].');
        }
        if (typeof patterns === 'string') {
            patterns = [patterns];
        }
        this.patterns = patterns;
        this.responseModifierCallBack = responseModifierCallBack;
        this.httpRequestFactory = httpRequestFactory;
    }
    isMatchingRequest(request, matcher) {
        let urlAccessor = UrlAccessorResolver_1.UrlAccessorResolver.getUrlAccessor(request);
        for (let pattern of this.patterns) {
            if (matcher(urlAccessor.getUrlFromRequest(request), pattern)) {
                return true;
            }
        }
        return false;
    }
    getResponseFake(request) {
        return __awaiter(this, void 0, void 0, function* () {
            let originalResponse = {};
            let error;
            let body;
            try {
                originalResponse = yield this.httpRequestFactory.createRequest(request);
                body = originalResponse.body;
            }
            catch (err) {
                error = err;
                body = '';
            }
            return Object.assign({}, originalResponse, {
                body: yield resolveOptionalPromise_1.resolveOptionalPromise(this.responseModifierCallBack(error, body, request))
            });
        });
    }
    getPatterns() {
        return this.patterns;
    }
}
exports.ResponseModifier = ResponseModifier;
