"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestSpy = void 0;
const UrlAccessorResolver_1 = require("./common/urlAccessor/UrlAccessorResolver");
class RequestSpy {
    constructor(patterns) {
        this.hasMatchingUrl = false;
        this.matchCount = 0;
        this.patterns = [];
        this.matchedRequests = [];
        if (typeof patterns !== 'string' && patterns.constructor !== Array) {
            throw new Error('invalid pattern, pattern must be of type string or string[].');
        }
        if (typeof patterns === 'string') {
            patterns = [patterns];
        }
        this.patterns = patterns;
    }
    getPatterns() {
        return this.patterns;
    }
    getMatchedRequests() {
        return this.matchedRequests;
    }
    hasMatch() {
        return this.hasMatchingUrl;
    }
    addMatch(matchedRequest) {
        this.hasMatchingUrl = true;
        this.matchedRequests.push(matchedRequest);
        this.matchCount++;
    }
    isMatchingRequest(request, matcher) {
        let urlAccessor = UrlAccessorResolver_1.UrlAccessorResolver.getUrlAccessor(request);
        for (let pattern of this.patterns) {
            if (matcher(urlAccessor.getUrlFromRequest(request), pattern)) {
                return true;
            }
        }
        return false;
    }
    getMatchedUrls() {
        let matchedUrls = [];
        for (let match of this.matchedRequests) {
            let urlAccessor = UrlAccessorResolver_1.UrlAccessorResolver.getUrlAccessor(match);
            let url = urlAccessor.getUrlFromRequest(match);
            matchedUrls.push(url);
        }
        return matchedUrls;
    }
    getMatchCount() {
        return this.matchCount;
    }
}
exports.RequestSpy = RequestSpy;
