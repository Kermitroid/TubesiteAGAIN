"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestModifier = void 0;
const resolveOptionalPromise_1 = require("./common/resolveOptionalPromise");
const UrlAccessorResolver_1 = require("./common/urlAccessor/UrlAccessorResolver");
class RequestModifier {
    constructor(patterns, requestOverride) {
        if (typeof patterns !== 'string' && patterns.constructor !== Array) {
            throw new Error('invalid pattern, pattern must be of type string or string[].');
        }
        if (typeof patterns === 'string') {
            patterns = [patterns];
        }
        this.patterns = patterns;
        this.requestOverrideFactory = typeof requestOverride === 'function'
            ? requestOverride
            : () => requestOverride;
    }
    getOverride(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return resolveOptionalPromise_1.resolveOptionalPromise(this.requestOverrideFactory(request));
        });
    }
    isMatchingRequest(request, matcher) {
        let urlAccessor = UrlAccessorResolver_1.UrlAccessorResolver.getUrlAccessor(request);
        for (let pattern of this.patterns) {
            if (matcher(urlAccessor.getUrlFromRequest(request), pattern)) {
                return true;
            }
        }
        return false;
    }
    getPatterns() {
        return this.patterns;
    }
}
exports.RequestModifier = RequestModifier;
