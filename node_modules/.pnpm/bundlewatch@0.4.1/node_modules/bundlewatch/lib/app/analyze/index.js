"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPercentageChangeString = exports.getOverallDifference = exports.default = void 0;
var _bytes = _interopRequireDefault(require("bytes"));
var _analyzeFiles = _interopRequireWildcard(require("./analyzeFiles"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const getOverallStatus = fileResults => {
  return fileResults.reduce((status, fileResult) => {
    if (status === _analyzeFiles.STATUSES.FAIL || fileResult.status === _analyzeFiles.STATUSES.FAIL) {
      return _analyzeFiles.STATUSES.FAIL;
    }
    if (status === _analyzeFiles.STATUSES.WARN || fileResult.status === _analyzeFiles.STATUSES.WARN) {
      return _analyzeFiles.STATUSES.WARN;
    }
    return _analyzeFiles.STATUSES.PASS;
  }, _analyzeFiles.STATUSES.PASS);
};
const getOverallDifference = fullResults => {
  let totalBaseBranchSize = 0;
  let totalFileResultSize = 0;
  let totalAdded = 0;
  let totalRemoved = 0;
  fullResults.forEach(fileResult => {
    totalBaseBranchSize += fileResult.baseBranchSize;
    totalFileResultSize += fileResult.size;
    if (fileResult.size < fileResult.baseBranchSize) {
      totalRemoved += fileResult.baseBranchSize - fileResult.size;
    } else {
      totalAdded += fileResult.size - fileResult.baseBranchSize;
    }
  });
  const percentageChange = totalBaseBranchSize ? (totalFileResultSize - totalBaseBranchSize) / totalBaseBranchSize * 100 : null;
  return {
    totalAdded,
    totalRemoved,
    percentageChange
  };
};
exports.getOverallDifference = getOverallDifference;
const getPercentageChangeString = percentageChange => {
  if (percentageChange === null) {
    return '';
  }
  const percentageChangeFixed = percentageChange.toFixed(1);
  if (percentageChange > 0) {
    return `+${percentageChangeFixed}%`;
  }
  if (percentageChange < 0) {
    return `${percentageChangeFixed}%`;
  }
  return `Â±${percentageChangeFixed}%`;
};
exports.getPercentageChangeString = getPercentageChangeString;
const getSummary = ({
  overallStatus,
  fullResults,
  baseBranchName
}) => {
  if (overallStatus === _analyzeFiles.STATUSES.FAIL) {
    return `maxSize check failed`;
  }
  let differenceSummary = '';
  if (baseBranchName) {
    const {
      totalAdded,
      totalRemoved,
      percentageChange
    } = getOverallDifference(fullResults);
    const percentageChangeString = getPercentageChangeString(percentageChange);
    const percentageChangeStringWithComma = percentageChangeString ? `, ${percentageChangeString}` : '';
    differenceSummary = `(+${(0, _bytes.default)(totalAdded)}, -${(0, _bytes.default)(totalRemoved)}${percentageChangeStringWithComma})`;
  }
  if (overallStatus === _analyzeFiles.STATUSES.WARN) {
    return `File(s) have passed tolerance thresholds ${differenceSummary}`;
  }
  return `Everything is in check ${differenceSummary}`;
};
const analyze = ({
  currentBranchFileDetails,
  baseBranchFileDetails,
  baseBranchName
}) => {
  let fileResults = (0, _analyzeFiles.default)({
    currentBranchFileDetails,
    baseBranchFileDetails,
    baseBranchName
  });
  const overallStatus = getOverallStatus(fileResults);
  const summary = getSummary({
    overallStatus,
    fullResults: fileResults,
    baseBranchName
  });
  return {
    status: overallStatus,
    fullResults: fileResults,
    summary
  };
};
var _default = exports.default = analyze;