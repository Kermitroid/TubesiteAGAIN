import React, { forwardRef, useRef, useContext, useEffect } from 'react';
import { DialogOverlay, DialogContent } from '@reach/dialog';
import { useId } from '@reach/auto-id';
import { useForkedRef, makeId, getOwnerDocument, createNamedContext } from '@reach/utils';
import invariant from 'invariant';
import PropTypes from 'prop-types';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var AlertDialogContext = /*#__PURE__*/createNamedContext("AlertDialogContext", {}); ////////////////////////////////////////////////////////////////////////////////

/**
 * AlertDialogOverlay
 *
 * Low-level component if you need more control over the styles or rendering of
 * the dialog overlay. In the following example we use the AlertDialogOverlay
 * and AlertDialogContent to have more control over the styles.
 *
 * Note: You must render an `AlertDialogContent` inside.
 *
 * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogoverlay
 */

var AlertDialogOverlay = /*#__PURE__*/forwardRef(function AlertDialogOverlay(_ref, forwardedRef) {
  var leastDestructiveRef = _ref.leastDestructiveRef,
      props = _objectWithoutPropertiesLoose(_ref, ["leastDestructiveRef"]);

  var ownRef = useRef(null);
  var ref = useForkedRef(forwardedRef, ownRef);
  var id = useId(props.id);
  var labelId = id ? makeId("alert-dialog", id) : undefined;
  var descriptionId = id ? makeId("alert-dialog-description", id) : undefined;
  return React.createElement(AlertDialogContext.Provider, {
    value: {
      labelId: labelId,
      descriptionId: descriptionId,
      overlayRef: ownRef,
      leastDestructiveRef: leastDestructiveRef
    }
  }, React.createElement(DialogOverlay, Object.assign({}, props, {
    ref: ref,
    "data-reach-alert-dialog-overlay": true,
    initialFocusRef: leastDestructiveRef
  })));
});

if (process.env.NODE_ENV !== "production") {
  AlertDialogOverlay.displayName = "AlertDialogOverlay";
  AlertDialogOverlay.propTypes = {
    isOpen: PropTypes.bool,
    onDismiss: PropTypes.func,
    leastDestructiveRef: function leastDestructiveRef() {
      return null;
    },
    children: PropTypes.node
  };
} ////////////////////////////////////////////////////////////////////////////////

/**
 * AlertDialogContent
 *
 * Low-level component if you need more control over the styles or rendering of
 * the dialog content.
 *
 * Note: Must be a child of `AlertDialogOverlay`.
 *
 * Note: You only need to use this when you are also styling
 * `AlertDialogOverlay`, otherwise you can use the high-level `AlertDialog`
 * component and pass the props to it.
 *
 * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogcontent
 */


var AlertDialogContent = /*#__PURE__*/forwardRef(function AlertDialogContent(_ref2, forwardRef) {
  var children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["children"]);

  var _useContext = useContext(AlertDialogContext),
      labelId = _useContext.labelId,
      leastDestructiveRef = _useContext.leastDestructiveRef,
      overlayRef = _useContext.overlayRef;

  useEffect(function () {
    var ownerDocument = getOwnerDocument(overlayRef.current) || document;

    if (labelId) {
      !ownerDocument.getElementById(labelId) ? process.env.NODE_ENV !== "production" ? invariant(false, "@reach/alert-dialog: You must render a `<AlertDialogLabel>`\n          inside an `<AlertDialog/>`.") : invariant(false) : void 0;
    }

    !leastDestructiveRef ? process.env.NODE_ENV !== "production" ? invariant(false, "@reach/alert-dialog: You must provide a `leastDestructiveRef` to\n          `<AlertDialog>` or `<AlertDialogOverlay/>`. Please see\n          https://ui.reach.tech/alert-dialog/#alertdialogoverlay-leastdestructiveref") : invariant(false) : void 0; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [labelId, leastDestructiveRef]);
  return React.createElement(DialogContent, Object.assign({
    role: "alertdialog",
    "aria-labelledby": labelId
  }, props, {
    ref: forwardRef,
    "data-reach-alert-dialong-content": true,
    "data-reach-alert-dialog-content": true
  }), children);
});

if (process.env.NODE_ENV !== "production") {
  AlertDialogContent.displayName = "AlertDialogContent";
  AlertDialogContent.propTypes = {
    children: PropTypes.node
  };
} ////////////////////////////////////////////////////////////////////////////////

/**
 * AlertDialogLabel
 *
 * The first thing ready by screen readers when the dialog opens, usually the
 * title of the dialog like "Warning!" or "Please confirm!".
 *
 * This is required. The `AlertDialog` will throw an error if no label is
 * rendered.
 *
 * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialoglabel
 */


var AlertDialogLabel = function AlertDialogLabel(props) {
  var _useContext2 = useContext(AlertDialogContext),
      labelId = _useContext2.labelId;

  return React.createElement("div", Object.assign({}, props, {
    id: labelId,
    "data-reach-alert-dialog-label": true
  }));
};

if (process.env.NODE_ENV !== "production") {
  AlertDialogLabel.displayName = "AlertDialogLabel";
} ////////////////////////////////////////////////////////////////////////////////

/**
 * AlertDialogDescription
 *
 * Additional content read by screen readers, usually a longer description
 * about what you need from the user like "This action is permanent, are you
 * sure?" etc.
 *
 * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogdescription
 * @param props
 */


var AlertDialogDescription = function AlertDialogDescription(props) {
  var _useContext3 = useContext(AlertDialogContext),
      descriptionId = _useContext3.descriptionId;

  return React.createElement("div", Object.assign({}, props, {
    id: descriptionId,
    "data-reach-alert-dialog-description": true
  }));
};

if (process.env.NODE_ENV !== "production") {
  AlertDialogDescription.displayName = "AlertDialogDescription";
} ////////////////////////////////////////////////////////////////////////////////

/**
 * AlertDialog
 *
 * High-level component to render an alert dialog.
 *
 * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialog
 * @param props
 */


var AlertDialog = function AlertDialog(_ref3) {
  var id = _ref3.id,
      isOpen = _ref3.isOpen,
      onDismiss = _ref3.onDismiss,
      leastDestructiveRef = _ref3.leastDestructiveRef,
      props = _objectWithoutPropertiesLoose(_ref3, ["id", "isOpen", "onDismiss", "leastDestructiveRef"]);

  return React.createElement(AlertDialogOverlay, Object.assign({}, {
    isOpen: isOpen,
    onDismiss: onDismiss,
    leastDestructiveRef: leastDestructiveRef,
    id: id
  }), React.createElement(AlertDialogContent, Object.assign({}, props)));
};

if (process.env.NODE_ENV !== "production") {
  AlertDialog.displayName = "AlertDialog";
  AlertDialog.propTypes = {
    isOpen: PropTypes.bool,
    onDismiss: PropTypes.func,
    leastDestructiveRef: function leastDestructiveRef() {
      return null;
    },
    children: PropTypes.node
  };
}

export { AlertDialog, AlertDialogContent, AlertDialogDescription, AlertDialogLabel, AlertDialogOverlay };
//# sourceMappingURL=alert-dialog.esm.js.map
