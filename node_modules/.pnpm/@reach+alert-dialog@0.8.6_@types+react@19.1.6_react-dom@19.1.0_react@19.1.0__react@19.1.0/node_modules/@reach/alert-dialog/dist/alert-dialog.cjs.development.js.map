{"version":3,"file":"alert-dialog.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert-dialog!\n *\n * A modal dialog that interrupts the user's workflow to get a response, usually\n * some sort of confirmation. This is different than a typical Dialog in that it\n * requires some user response, like \"Save\", or \"Cancel\", etc.\n *\n * Most of the time you'll use `AlertDialog`, `AlertDialogLabel`, and\n * `AlertDialogDescription` together. If you need more control over the styling\n * of the modal you can drop down a level and use `AlertDialogOverlay` and\n * `AlertDialogContent` instead of `AlertDialog`.\n *\n * When a Dialog opens, the _least destructive_ action should be focused so that\n * if a user accidentally hits enter when the dialog opens no damage is done.\n * This is accomplished with the `leastDestructiveRef` prop.\n *\n * Every dialog must render an `AlertDialogLabel` so the screen reader knows\n * what to say about the dialog. If an `AlertDialogDescription` is also\n * rendered, the screen reader will also announce that. If you render more than\n * these two elements and some buttons, the screen reader might not announce it\n * so it's important to keep the content inside of `AlertDialogLabel` and\n * `AlertDialogDescription`.\n *\n * This is built on top of [Dialog](/dialog), so `AlertDialog` spreads its props\n * and renders a `Dialog`, same for `AlertDialogOverlay` to `DialogOverlay`, and\n * `AlertDialogContent` to `DialogContent`.\n *\n * @see Docs     https://reacttraining.com/reach-ui/alert-dialog\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/alert-dialog\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#alertdialog\n */\n\nimport React, { forwardRef, useContext, useEffect, useRef } from \"react\";\nimport {\n  DialogOverlay,\n  DialogContent,\n  DialogProps,\n  DialogContentProps,\n} from \"@reach/dialog\";\nimport { useId } from \"@reach/auto-id\";\nimport {\n  getOwnerDocument,\n  createNamedContext,\n  makeId,\n  useForkedRef,\n} from \"@reach/utils\";\nimport invariant from \"invariant\";\nimport PropTypes from \"prop-types\";\n\nlet AlertDialogContext = createNamedContext<IAlertDialogContext>(\n  \"AlertDialogContext\",\n  {} as IAlertDialogContext\n);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogOverlay\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog overlay. In the following example we use the AlertDialogOverlay\n * and AlertDialogContent to have more control over the styles.\n *\n * Note: You must render an `AlertDialogContent` inside.\n *\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogoverlay\n */\nexport const AlertDialogOverlay = forwardRef<HTMLDivElement, AlertDialogProps>(\n  function AlertDialogOverlay({ leastDestructiveRef, ...props }, forwardedRef) {\n    let ownRef = useRef<HTMLDivElement | null>(null);\n    let ref = useForkedRef(forwardedRef, ownRef);\n    let id = useId(props.id);\n    let labelId = id ? makeId(\"alert-dialog\", id) : undefined;\n    let descriptionId = id ? makeId(\"alert-dialog-description\", id) : undefined;\n\n    return (\n      <AlertDialogContext.Provider\n        value={{\n          labelId,\n          descriptionId,\n          overlayRef: ownRef,\n          leastDestructiveRef,\n        }}\n      >\n        <DialogOverlay\n          {...props}\n          ref={ref}\n          data-reach-alert-dialog-overlay\n          initialFocusRef={leastDestructiveRef}\n        />\n      </AlertDialogContext.Provider>\n    );\n  }\n);\n\nif (__DEV__) {\n  AlertDialogOverlay.displayName = \"AlertDialogOverlay\";\n  AlertDialogOverlay.propTypes = {\n    isOpen: PropTypes.bool,\n    onDismiss: PropTypes.func,\n    leastDestructiveRef: () => null,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogContent\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog content.\n *\n * Note: Must be a child of `AlertDialogOverlay`.\n *\n * Note: You only need to use this when you are also styling\n * `AlertDialogOverlay`, otherwise you can use the high-level `AlertDialog`\n * component and pass the props to it.\n *\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogcontent\n */\nexport const AlertDialogContent = forwardRef<\n  HTMLDivElement,\n  AlertDialogContentProps\n>(function AlertDialogContent({ children, ...props }, forwardRef) {\n  let { labelId, leastDestructiveRef, overlayRef } = useContext(\n    AlertDialogContext\n  );\n  useEffect(() => {\n    let ownerDocument = getOwnerDocument(overlayRef.current) || document;\n    if (labelId) {\n      invariant(\n        ownerDocument.getElementById(labelId),\n        `@reach/alert-dialog: You must render a \\`<AlertDialogLabel>\\`\n          inside an \\`<AlertDialog/>\\`.`\n      );\n    }\n    invariant(\n      leastDestructiveRef,\n      `@reach/alert-dialog: You must provide a \\`leastDestructiveRef\\` to\n          \\`<AlertDialog>\\` or \\`<AlertDialogOverlay/>\\`. Please see\n          https://ui.reach.tech/alert-dialog/#alertdialogoverlay-leastdestructiveref`\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [labelId, leastDestructiveRef]);\n  return (\n    <DialogContent\n      role=\"alertdialog\"\n      aria-labelledby={labelId}\n      {...props}\n      ref={forwardRef}\n      // lol: remove in 1.0\n      data-reach-alert-dialong-content\n      data-reach-alert-dialog-content\n    >\n      {children}\n    </DialogContent>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogcontent-props\n */\nexport type AlertDialogContentProps = {\n  /**\n   * Accepts any renderable content but should generally be restricted to\n   * `AlertDialogLabel`, `AlertDialogDescription` and action buttons, other\n   * content might not be announced to the user by the screen reader.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogcontent-children\n   */\n  children: React.ReactNode;\n} & DialogContentProps;\n\nif (__DEV__) {\n  AlertDialogContent.displayName = \"AlertDialogContent\";\n  AlertDialogContent.propTypes = {\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogLabel\n *\n * The first thing ready by screen readers when the dialog opens, usually the\n * title of the dialog like \"Warning!\" or \"Please confirm!\".\n *\n * This is required. The `AlertDialog` will throw an error if no label is\n * rendered.\n *\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialoglabel\n */\nexport const AlertDialogLabel: React.FC<React.HTMLAttributes<\n  HTMLDivElement\n>> = props => {\n  const { labelId } = useContext(AlertDialogContext);\n  return <div {...props} id={labelId} data-reach-alert-dialog-label />;\n};\n\nif (__DEV__) {\n  AlertDialogLabel.displayName = \"AlertDialogLabel\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogDescription\n *\n * Additional content read by screen readers, usually a longer description\n * about what you need from the user like \"This action is permanent, are you\n * sure?\" etc.\n *\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialogdescription\n * @param props\n */\nexport const AlertDialogDescription: React.FC<React.HTMLAttributes<\n  HTMLDivElement\n>> = props => {\n  const { descriptionId } = useContext(AlertDialogContext);\n  return (\n    <div {...props} id={descriptionId} data-reach-alert-dialog-description />\n  );\n};\n\nif (__DEV__) {\n  AlertDialogDescription.displayName = \"AlertDialogDescription\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialog\n *\n * High-level component to render an alert dialog.\n *\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialog\n * @param props\n */\nexport const AlertDialog: React.FC<AlertDialogProps> = ({\n  id,\n  isOpen,\n  onDismiss,\n  leastDestructiveRef,\n  ...props\n}) => {\n  return (\n    <AlertDialogOverlay {...{ isOpen, onDismiss, leastDestructiveRef, id }}>\n      <AlertDialogContent {...props} />\n    </AlertDialogOverlay>\n  );\n};\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/alert-dialog#alertdialog-props\n */\nexport type AlertDialogProps = {\n  /**\n   * Controls whether the dialog is open or not.\n   *\n   * @see Docs: https://reacttraining.com/reach-ui/alert-dialog#alertdialog-isopen\n   */\n  isOpen?: boolean;\n  /**\n   * When the user clicks outside the modal or hits the escape key,\n   * this function will be called. If you want the modal to close,\n   * youâ€™ll need to set state.\n   *\n   * @see Docs: https://reacttraining.com/reach-ui/alert-dialog#alertdialog-ondismiss\n   */\n  onDismiss?: (event?: React.SyntheticEvent) => void;\n  /**\n   * To prevent accidental data loss, an alert dialog should focus the least\n   * destructive action button when it opens.\n   *\n   * @see Docs: https://reacttraining.com/reach-ui/alert-dialog#alertdialog-leastdestructiveref\n   */\n  leastDestructiveRef?: React.RefObject<HTMLElement>;\n  /**\n   * Accepts any renderable content but should generally be restricted to\n   * `AlertDialogLabel`, `AlertDialogDescription` and action buttons, other\n   * content might not be announced to the user by the screen reader.\n   *\n   * @see Docs: https://reacttraining.com/reach-ui/alert-dialog#alertdialog-children\n   */\n  children: React.ReactNode;\n} & DialogProps;\n\nif (__DEV__) {\n  AlertDialog.displayName = \"AlertDialog\";\n  AlertDialog.propTypes = {\n    isOpen: PropTypes.bool,\n    onDismiss: PropTypes.func,\n    leastDestructiveRef: () => null,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ninterface IAlertDialogContext {\n  labelId: string | undefined;\n  descriptionId: string | undefined;\n  overlayRef: React.MutableRefObject<HTMLDivElement | null>;\n  leastDestructiveRef?: React.RefObject<HTMLElement>;\n}\n"],"names":["AlertDialogContext","createNamedContext","AlertDialogOverlay","forwardRef","forwardedRef","leastDestructiveRef","props","ownRef","useRef","ref","useForkedRef","id","useId","labelId","makeId","undefined","descriptionId","React","Provider","value","overlayRef","DialogOverlay","initialFocusRef","displayName","propTypes","isOpen","PropTypes","bool","onDismiss","func","children","node","AlertDialogContent","useContext","useEffect","ownerDocument","getOwnerDocument","current","document","getElementById","invariant","DialogContent","role","AlertDialogLabel","AlertDialogDescription","AlertDialog"],"mappings":"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"}